#!/usr/bin/env python3

import argparse
import json
import re
import subprocess
import sys
import time
from pathlib import Path
from typing import Callable, Dict, List


# Available interpretations
I_LESS_IS_BETTER = "LESS_IS_BETTER"
I_MORE_IS_BETTER = "MORE_IS_BETTER"
I_NEUTRAL = "NEUTRAL"


def measure(result: Dict, benchmark: str, metric: str, unit: str,
            interpretation: str, value_func: Callable[[], int]) -> bool:
    """ Do a measurement. Returns True if the measurement was successful. """
    measurement = {
        "unit": unit,
        "interpretation": interpretation,
    }

    try:
        measurement["values"] = value_func()
        success = True
    except subprocess.CalledProcessError as e:
        stdout = e.stdout.decode('UTF-8') if e.stdout else '<Empty>'
        stderr = e.stderr.decode('UTF-8') if e.stderr else '<Empty>'
        measurement["error"] = f"{e}\nstdout: {stdout}\nstderr: {stderr}"
        success = False
    except Exception as e:
        measurement["error"] = str(e)
        success = False

    if benchmark not in result:
        result[benchmark] = {}
    result[benchmark][metric] = measurement

    return success


def timing_run(repo_path: Path, args: List[str]) -> float:
    """ Runs a given program and returns build time. """
    start = time.time()
    subprocess.run(
        args,
        cwd=repo_path,
        stdout=sys.stderr,
        stderr=sys.stderr,
        check=True,
    )
    end = time.time()
    return end - start


def get_backend_coverage(repo_path: Path) -> float:
    path = repo_path / "backend/aggregator/target/site/jacoco-aggregate/index.html"
    coverage_regex = r'<td>Total</td><td class="bar">([\d,]+) of ([\d,]+)</td>'

    with open(path) as f:
        match = re.search(coverage_regex, f.read())
        if not match:
            raise Exception("Couldn't find coverage")

        missed = int(match.group(1).replace(",", ""))
        total = int(match.group(2).replace(",", ""))
        coverage = (total - missed) / total

        return coverage * 100  # percent


def get_lines(repo_path: Path, languages: List[str]) -> int:
    output = subprocess.check_output(
        ["tokei", "--output", "json", repo_path],
        stderr=sys.stderr,  # TODO Check if manual redirection really necessary
    )
    parsed_json = json.loads(output)

    total = 0
    for language in languages:
        if not language in parsed_json:
            continue

        total += parsed_json[language]["code"]

        # Tokei spits out a nested object of the format:
        # children: { "Css": [ "stats": { "code": 20 } ] }
        # where the child array (e.g. "Css") has one entry per file
        children = parsed_json[language]["children"]
        for file_infos in children.values():
            for file_info in file_infos:
                total += file_info["stats"]["code"]

    return total


def get_todo_count(path: Path) -> int:
    output = subprocess.check_output(
        ["rg",  "TODO|FIXME", path],
        stderr=sys.stderr,  # TODO Check if manual redirection really necessary
    )
    return len(output.splitlines())


def get_checkstyle_violations(repo_path: Path) -> int:
    violations: int = 0
    for path in repo_path.glob("backend/*/target/checkstyle-result.xml"):
        with open(path, "r") as f:
            violations += len([line for line in f.readlines() if "<error " in line])
    return violations


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("repo_path")
    args = parser.parse_args()

    repo_path = Path(args.repo_path).resolve()
    result = {}

    backend_success = measure(
        result,
        "backend",
        "build_time",
        "seconds",
        I_LESS_IS_BETTER,
        lambda: [timing_run(repo_path, [repo_path / "scripts" / "build-backend"])],
    )

    if backend_success:
        measure(
            result,
            "backend",
            "coverage",
            "percent",
            I_MORE_IS_BETTER,
            lambda: [get_backend_coverage(repo_path)]
        )

        measure(
            result,
            "backend",
            "sloc",
            "lines",
            I_NEUTRAL,
            lambda: [get_lines(repo_path, ["Java"])],
        )

        measure(
            result,
            "backend",
            "todos",
            "",
            I_LESS_IS_BETTER,
            lambda: [get_todo_count(repo_path / "backend")],
        )

        measure(
            result,
            "backend",
            "checkstyle_violations",
            "",
            I_LESS_IS_BETTER,
            lambda: [get_checkstyle_violations(repo_path)],
        )

    frontend_success = measure(
        result,
        "frontend",
        "build_time",
        "seconds",
        I_LESS_IS_BETTER,
        lambda: [timing_run(repo_path, [repo_path / "scripts" / "build-frontend"])],
    )

    if frontend_success:
        measure(
            result,
            "frontend",
            "sloc",
            "lines",
            I_NEUTRAL,
            lambda: [get_lines(repo_path, ["TypeScript", "Vue", "Css", "CSS", "Html"])],
        )

        measure(
            result,
            "frontend",
            "todos",
            "",
            I_LESS_IS_BETTER,
            lambda: [get_todo_count(repo_path / "frontend")],
        )

    measure(
        result,
        "misc",
        "always zero",
        "cats",
        I_NEUTRAL,
        lambda: [0],
    )

    print(json.dumps(result))


if __name__ == '__main__':
    main()
