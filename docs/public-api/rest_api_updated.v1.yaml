openapi: 3.0.0
info:
  title: rest_api_updated
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  /commit-history:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  commits:
                    type: array
                    items:
                      $ref: '#/components/schemas/CommitDatapoint'
      operationId: get-commit-history
      parameters:
        - schema:
            type: string
          in: query
          name: repo_id
        - schema:
            type: integer
          in: query
          name: start_time
        - schema:
            type: integer
          in: query
          name: end_time
        - schema:
            type: integer
          in: query
          name: duration
        - schema:
            type: array
          in: query
          name: measurements
  /commit-detail:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  commit:
                    $ref: '#/components/schemas/Commit'
                  runs:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          $ref: '#/components/schemas/RunId'
                        timestamp:
                          $ref: '#/components/schemas/Timestamp'
      operationId: get-commit-detail
      parameters:
        - schema:
            type: string
          in: query
          name: repo_id
        - schema:
            type: string
          in: query
          name: hash
        - schema:
            type: string
          in: query
          name: run_id
          description: 'newest run id for commit, can be provided instead of repo id + hash'
  /run-detail:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  run:
                    $ref: '#/components/schemas/Run'
                  commit:
                    $ref: '#/components/schemas/CommitHash'
                required:
                  - run
      operationId: get-run-detail
      parameters:
        - schema:
            type: string
          in: query
          name: run_id
          description: or repo id + hash
        - schema:
            type: string
          in: query
          name: repo_id
        - schema:
            type: string
          in: query
          name: hash
  /all-repos:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Repo'
      operationId: get-all-repos
  /commit-compare:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  run_one:
                    $ref: '#/components/schemas/Run'
                  run_two:
                    $ref: '#/components/schemas/Run'
      operationId: get-commit-compare
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - properties:
                    run_one:
                      $ref: '#/components/schemas/RunId'
                    run_two:
                      $ref: '#/components/schemas/RunId'
                - properties:
                    commit_one:
                      type:
                        - string
                        - object
                      properties:
                        repo_id:
                          $ref: '#/components/schemas/RepoId'
                        hash:
                          $ref: '#/components/schemas/CommitHash'
                    commit_two:
                      type:
                        - string
                        - object
                      properties:
                        repo_id:
                          $ref: '#/components/schemas/RepoId'
                        hash:
                          $ref: '#/components/schemas/CommitHash'
              type: object
        description: ''
  /measurements:
    delete:
      summary: ''
      operationId: delete-measurements
      responses:
        '200':
          description: OK
      parameters:
        - schema:
            type: string
          in: query
          name: repo_id
        - schema:
            type: string
          in: query
          name: metric
        - schema:
            type: string
          in: query
          name: benchmark
  '/queue/{task_id}':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  runners:
                    type: array
                    items:
                      $ref: '#/components/schemas/Runner'
      operationId: get-queue
    delete:
      summary: ''
      operationId: delete-queue
      responses:
        '200':
          description: OK
      parameters: []
    parameters:
      - schema:
          type: string
        name: task_id
        in: path
        required: true
  /queue/tar:
    post:
      summary: ''
      operationId: post-queue-tar
      responses:
        '200':
          description: OK
      parameters:
        - schema:
            type: string
          in: query
          name: description
      requestBody:
        content:
          application/tar:
            schema:
              type: object
              properties: {}
  /queue/commit:
    post:
      summary: ''
      operationId: post-queue-commit
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                hash:
                  $ref: '#/components/schemas/CommitHash'
                repo_id:
                  $ref: '#/components/schemas/RepoId'
  /repo:
    get:
      summary: Query a single repo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  repo:
                    $ref: '#/components/schemas/Repo'
                required:
                  - repo
      operationId: get-repo
      parameters:
        - schema:
            type: string
          in: query
          name: repo_id
          required: true
          description: of type RepoId
    post:
      operationId: post-repo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  repo:
                    $ref: '#/components/schemas/Repo'
                required:
                  - repo
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                remote_url:
                  $ref: '#/components/schemas/RemoteUrl'
                token:
                  type: string
              required:
                - name
                - remote_url
      security:
        - auth: []
      summary: Create a new repo
    patch:
      summary: Modify an existing repo
      operationId: patch-repo
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                repo_id:
                  type: string
                  title: RepoId
                  format: uuid
                name:
                  type: string
                token:
                  type: string
                remote_url:
                  $ref: '#/components/schemas/RemoteUrl'
                tracked_branches:
                  type: array
                  uniqueItems: true
                  items:
                    type: string
              required:
                - repo_id
        description: 'If token is the empty string, the token for this repo is disabled.'
      security:
        - auth: []
    delete:
      summary: Delete an existing repo
      operationId: delete-repo
      responses:
        '200':
          description: OK
      security:
        - auth: []
      requestBody: {}
      parameters:
        - schema:
            type: string
          in: query
          name: repo_id
          description: of type RepoId
          required: true
  /test-token:
    post:
      summary: Test whether an auth token is valid
      operationId: post-test-token
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      security:
        - auth: []
      parameters:
        - schema:
            type: string
          in: query
          name: repo_id
          description: of type RepoId
      description: |-
        Test whether an auth token is valid.

        If a repo id is specified, checks whether the auth token allows access to that repo.
        If no repo id is specified, checks whether the auth token is valid as admin auth token.
  /recently-benchmarked:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  runs:
                    type: array
                    items:
                      type: object
                      properties:
                        run:
                          $ref: '#/components/schemas/Run'
                        significant_changes:
                          type: object
                          properties:
                            measurement:
                              $ref: '#/components/schemas/MeasurementMetadata'
                            diff:
                              type: number
      operationId: get-recently-benchmarked
      parameters:
        - schema:
            type: number
          in: query
          name: amount
          description: maximum
        - schema:
            type: boolean
          in: query
          name: significant_only
          description: 'default: false'
components:
  schemas:
    CommitHash:
      title: CommitHash
      type: string
    CommitDatapoint:
      title: CommitDatapoint
      type: object
      properties:
        hash:
          $ref: '#/components/schemas/CommitHash'
        author:
          type: string
        author_date:
          type: integer
        summary:
          type: string
        parents:
          type: array
          items:
            $ref: '#/components/schemas/CommitHash'
        values:
          type: array
          items:
            $ref: '#/components/schemas/DatapointValue'
    MeasurementMetadata:
      title: MeasurementMetadata
      type: object
      properties:
        benchmark:
          type: string
        metric:
          type: string
        unit:
          type: string
        interpretation:
          type: string
    DatapointValue:
      title: DatapointValue
      oneOf:
        - properties:
            value:
              type: number
        - properties:
            error_message:
              type: string
      type: object
    Timestamp:
      type: integer
      title: Timestamp
      format: int64
      description: unix/epoch time (number of seconds since 1970-01-01)
    Commit:
      title: Commit
      type: object
      properties:
        repo_id:
          type: string
          description: in case commit is looked up via run id
        hash:
          $ref: '#/components/schemas/CommitHash'
        author:
          type: string
        author_date:
          type: integer
        committer:
          type: string
        committer_date:
          type: integer
        message:
          type: string
        parents:
          type: array
          items:
            $ref: '#/components/schemas/CommitHash'
    Run:
      title: Run
      oneOf:
        - properties:
            run_id:
              $ref: '#/components/schemas/RunId'
            start_time:
              $ref: '#/components/schemas/Timestamp'
            stop_time:
              $ref: '#/components/schemas/Timestamp'
            measurements:
              type: array
              items:
                $ref: '#/components/schemas/Measurement'
          required:
            - start_time
            - stop_time
            - measurements
        - properties:
            run_id:
              $ref: '#/components/schemas/RunId'
            start_time:
              $ref: '#/components/schemas/Timestamp'
            stop_time:
              $ref: '#/components/schemas/Timestamp'
            error_message:
              type: string
          required:
            - run_id
            - start_time
            - stop_time
            - error_message
      type: object
    RepoId:
      title: RepoId
      type: string
    Repo:
      title: Repo
      type: object
      properties:
        id:
          type: string
          title: RepoId
          format: uuid
        name:
          type: string
        branches:
          type: array
          uniqueItems: true
          items:
            type: string
        tracked_branches:
          type: array
          uniqueItems: true
          items:
            type: string
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/MeasurementMetadata'
        remote_url:
          $ref: '#/components/schemas/RemoteUrl'
        has_token:
          type: boolean
          description: ''
      required:
        - id
        - name
        - branches
        - tracked_branches
        - measurements
        - remote_url
        - has_token
    RemoteUrl:
      title: RemoteUrl
      type: string
    Task:
      title: Task
      type: object
      properties:
        task_id:
          $ref: '#/components/schemas/TaskId'
        author:
          type: string
        reference:
          oneOf:
            - $ref: '#/components/schemas/Commit'
            - type: string
              description: description of a tar
    TaskId:
      title: TaskId
      type: string
    Measurement:
      title: Measurement
      oneOf:
        - properties:
            metadata:
              $ref: '#/components/schemas/MeasurementMetadata'
            value:
              type: number
            values:
              type: array
              items:
                type: number
        - properties:
            metadata:
              $ref: '#/components/schemas/MeasurementMetadata'
            error_message:
              type: string
      type: object
    RunId:
      title: RunId
      type: string
    Runner:
      title: Runner
      type: object
      properties:
        name:
          type: string
        working_on:
          $ref: '#/components/schemas/TaskId'
        operating_system:
          type: string
        machine_info:
          type: string
